#!/usr/bin/env bash

#host_path=${DEEPOPS_HOST_ROOT_PATH:-`pwd`}
host_path=${DEEPOPS_HOST_ROOT_PATH:-/tmp/deepops}
container=${DEEPOPS_CONTAINER:-deepops/deploy:latest}

docker="docker run --rm -ti --net=host"
docker_mnt_config="-v ${host_path}/config:/source/deepops/config"
docker_mnt_ssh="-v ${host_path}/ssh:/root/.ssh"

kubectl() {
    ${docker} ${docker_mnt_config} ${docker_mnt_ssh} ${container} kubectl --kubeconfig=/source/deepops/config/admin.conf $@
}

helm() {
    ${docker} ${docker_mnt_config} ${docker_mnt_ssh} -e KUBECONFIG=/source/deepops/config/admin.conf ${container} helm --home /source/deepops/config/.helm $@
}

logo() {
    echo "
    ██████╗ ███████╗███████╗██████╗  ██████╗ ██████╗ ███████╗
    ██╔══██╗██╔════╝██╔════╝██╔══██╗██╔═══██╗██╔══██╗██╔════╝
    ██║  ██║█████╗  █████╗  ██████╔╝██║   ██║██████╔╝███████╗
    ██║  ██║██╔══╝  ██╔══╝  ██╔═══╝ ██║   ██║██╔═══╝ ╚════██║
    ██████╔╝███████╗███████╗██║     ╚██████╔╝██║     ███████║
    ╚═════╝ ╚══════╝╚══════╝╚═╝      ╚═════╝ ╚═╝     ╚══════╝
    "
}

type docker >/dev/null 2>&1
if [ $? -ne 0 ] ; then
    echo
    echo "ERROR: Docker is required"
    echo
    echo -n "Install Docker? [Y/n] "
    read install_docker
    case "${install_docker}" in
        Y|y|yes|"")
            echo
            echo "Installing Docker in 5 sec..."
            echo "Be sure to add your user to the Docker group after the install is finished and run the $0 command again"
            sleep 5
            get_docker=$(mktemp)
            curl -fsSL get.docker.com -o ${get_docker}
            sudo sh ${get_docker}
            sudo rm -f ${get_docker}
            ;;
        *)
            echo
            echo "You can install Docker yourself with:"
            echo "$ curl -fsSL get.docker.com -o get-docker.sh"
            echo "$ sudo sh ./get-docker.sh"
            ;;
    esac
    exit 1
fi

case "$1" in
    bootstrap)
        shift

        mkdir -p ${host_path}
        chmod 0700 ${host_path}

        # create default configuration directory if not exists
        echo -en "Creating default configuration directory:\t${host_path}/config\t"
        if ! [ -d ${host_path}/config ] ; then
            mkdir -p ${host_path}/config
            ${docker} ${docker_mnt_config} -u $(id -u):$(id -g) ${container} cp -r config.example/. config/
            ${docker} ${docker_mnt_config} -u $(id -u):$(id -g) ${container} cp -r kubespray/inventory/sample/hosts.ini config/kube-mgmt-hosts.ini
            echo "[created]"
        else
            echo "[exists, not creating]"
        fi

        # create default ssh key directory if not exists
        echo -en "Creating default SSH directory:\t\t\t${host_path}/ssh\t"
        if ! [ -d ${host_path}/ssh ] ; then
            mkdir -p ${host_path}/ssh
            ssh-keygen -f ${host_path}/ssh/deepops_rsa -P "" >/dev/null 2>&1
            echo "[created]"
        else
            echo "[exists, not creating]"
        fi

        # copy specified or default ssh key if not using password auth
        ssh_key=${SSH_KEY:-~/.ssh/id_rsa}
        for arg in "$@" ; do
            if [ "$arg" == "--password" ] ; then
                ssh_key=
                echo "Password authentication"
            fi
        done
        if [ "x${ssh_key}" != "x" ] ; then
            echo "SSH key authentication"
            echo -e "Using SSH key:\t\t\t${ssh_key}"
            if ! [ -f ${ssh_key} ] ; then
                echo
                echo "ERROR: SSH (${ssh_key}) does not exist"
                exit 1
            fi
            cp ${ssh_key} ${host_path}/ssh/bootstrap_rsa
            echo -e "Coppied SSH key to:\t\t${host_path}/ssh/bootstrap_rsa"
            ssh_key="--ssh-key /root/.ssh/bootstrap_rsa"
        fi

        # run bootstrap playbook
        case "$1" in
            mgmt)
                shift
                echo
                ${docker} ${docker_mnt_config} ${docker_mnt_ssh} ${container} setup_deepops_user ${ssh_key} "$@"
                ;;
            compute)
                shift
                echo
                dgxie_host=$(kubectl describe pod -l app=dgxie | grep Node: | awk '{print $2}' | cut -d\/ -f2)
                bastion=
                for arg in "$@" ; do
                    if [ "$arg" == "--bastion" ] ; then
                        bastion="--bastion deepops@${dgxie_host}"
                    fi
                done
                set -x
                args=$(echo $@ | sed 's/--bastion//g')
                ${docker} ${docker_mnt_config} ${docker_mnt_ssh} ${container} setup_deepops_user ${ssh_key} ${bastion} ${args}
                set +x
                ;;
        esac
        
        # remove copied ssh private key
        if [ -f ${host_path}/ssh/bootstrap_rsa ] ; then
            rm -f ${host_path}/ssh/bootstrap_rsa
            echo -e "Removed SSH key:\t\t${host_path}/ssh/bootstrap_rsa"
        fi
        ;;
    k8s|kube|kubernetes)
        ${docker} ${docker_mnt_config} ${docker_mnt_ssh} ${container} ansible-playbook -b -i config/kube-mgmt-hosts.ini --extra-vars "@config/kube.yml" kubespray/cluster.yml
        ${docker} ${docker_mnt_config} ${docker_mnt_ssh} ${container} ansible -i config/kube-mgmt-hosts.ini all -b -m fetch -a "src=/etc/kubernetes/admin.conf flat=yes dest=./config/"
        if [ -f ./kubectl ] ; then
            curl -sLO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
        fi
        mv ~/.kube/config{,.bak} && KUBECONFIG=./config/admin.conf:~/.kube/config.bak ./kubectl config view --flatten | tee ~/.kube/config >/dev/null
        echo
        ./kubectl get nodes
        ;;
    slurm)
        ${docker} ${docker_mnt_config} ${docker_mnt_ssh} ${container} ansible-playbook -k -K ansible/playbooks/slurm.yml
        ;;
    bash)
        ${docker} ${docker_mnt_config} ${docker_mnt_ssh} ${container} bash
        ;;
    cmd)
        shift
        ${docker} ${docker_mnt_config} ${docker_mnt_ssh} ${container} $@
        ;;
    helm)
        shift
        if ! [ -d ${host_path}/config/.helm ] ; then
            ${docker} -u $(id -u):$(id -g) ${docker_mnt_config} ${docker_mnt_ssh} -e KUBECONFIG=/source/deepops/config/admin.conf ${container} helm --home /source/deepops/config/.helm init --client-only
        fi
        helm $@
        ;;
    kubectl)
        shift
        kubectl $@
        ;;
    ceph)
        helm repo add rook-master https://charts.rook.io/master
        helm install --namespace rook-ceph-system --name rook-ceph rook-master/rook-ceph --version v0.7.0-284.g863c10f --set agent.flexVolumeDirPath=/var/lib/kubelet/volume-plugins/
        kubectl create -f services/rook-cluster.yml
        ;;
    *)
        logo
        echo "Usage: $0 bootstrap [OPTIONS]"
        echo
        ${docker} ${container} setup_deepops_user --help | tail -n+3 | grep -v ssh
        echo "Environment variables:"
        echo -e "  SSH_KEY=/path/to/ssh/key\tUse alternate SSH key (default: ~/.ssh/id_rsa) instead of password"
        echo
        echo "Notes:"
        echo -e "  You can pass the '--ip' flag multiple times for multiple management servers"
        echo -e "  Omit the '--password' flag to use an SSH key"
        ;;
esac
