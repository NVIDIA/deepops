- hosts: localhost
  gather_facts: no
  tasks:
    - name: Validate kubernetes cluster is up
      shell:  kubectl cluster-info | grep master
      register: cluster
      failed_when: cluster.rc == 1
      ignore_errors: yes

    - name: Check Operating System
      shell: cat /etc/os-release | grep -iw ID | awk -F'=' '{print $2}'
      register: osid
      ignore_errors: yes

    - name: Check Operating System
      shell: cat /etc/os-release | grep -iw version | sed 's/VERSION=//g;s/"//g'
      register: osversion
      ignore_errors: yes

    - name: Check Docker Version
      shell: docker version | grep -i -A1 'Client' | grep -i version  | awk '{print $2}'
      register: dockerversion
      ignore_errors: yes

    - name: Check Kubernetes Version
      shell: kubectl version --short | grep Server | awk '{print $3}'
      register: k8sversion
      ignore_errors: yes

    - name: Check Helm Version
      shell: helm version -s --short | awk '{print $2}' | sed 's/v//g;s/\+.*//g'
      register: helmversion
      ignore_errors: yes

    - name: Check Nvidia GPU Toolkit  versions
      shell: kubectl get pods --all-namespaces -o=jsonpath="{range .items[*]}{.metadata.name}{'\t'}{.spec.containers[*].image}{'\n'}" | grep toolkit | awk -F':' '{print $2}'
      register: nvtoolkit
      ignore_errors: yes

    - name: Check Nvidia K8s Device  versions
      shell: kubectl get pods --all-namespaces -o=jsonpath="{range .items[*]}{.metadata.name}{'\t'}{.spec.containers[*].image}{'\n'}" | grep 'k8s-device' | awk -F':' '{print $2}'
      register: k8sdevice
      ignore_errors: yes

    - name: Check Nvidia Container Driver versions
      shell: kubectl get pods --all-namespaces -o=jsonpath="{range .items[*]}{.metadata.name}{'\t'}{.spec.containers[*].image}{'\n'}" | grep 'nvidia/driver'  | awk -F':' '{print $2}'
      register: nvcdriver
      ignore_errors: yes

    - name: Check Nvidia GPU Operator versions
      shell: kubectl get pods --all-namespaces -o=jsonpath="{range .items[*]}{.metadata.name}{'\t'}{.spec.containers[*].image}{'\n'}" | grep 'gpu-operator'  | awk -F':' '{print $2}'
      register: gpuoperator
      ignore_errors: yes

    - name: Report Operating System Version
      when: "'ubuntu' in osid.stdout_lines"
      ignore_errors: yes
      debug:
        msg: "Ubuntu Operating System version {{ osversion.stdout }}"

    - name: Report Docker Version
      ignore_errors: yes
      debug:
        msg: "Docker Version {{ dockerversion.stdout }}"

    - name: Report Kubernetes Version
      ignore_errors: yes
      debug:
        msg: "Kubernetes Version {{ k8sversion.stdout }}"

    - name: Report Helm Version
      ignore_errors: yes
      debug:
        msg: "Helm Version {{ helmversion.stdout }}"

    - name: Report NV Toolkit Driver
      ignore_errors: yes
      debug:
        msg: "NV Container Toolkit Version {{ nvtoolkit.stdout }}"

    - name: Report K8sDevice Plugin Version
      ignore_errors: yes
      debug:
        msg: "Nvidia K8s Device Plugin Version {{ k8sdevice.stdout }}"

    - name: Report Nvidia Container Driver Version
      ignore_errors: yes
      debug:
        msg: "Nvidia Container Driver Version {{ nvcdriver.stdout }}"

    - name: Report Nvidia GPU Operator version
      ignore_errors: yes
      debug:
        msg: "Nvidia GPU Operator versions {{ gpuoperator.stdout }}"

    - name: check master node is up and running
      shell: kubectl get nodes | grep -i ready
      register: nodeready
      failed_when: "'NotReady' in nodeready.stdout"
      ignore_errors: yes

    - name: Check all pods are running for Kubernetes
      shell: kubectl get pods --all-namespaces | egrep -iv 'Running|NAME|Completed'
      register: kubepods
      failed_when: kubepods.rc == 0
      ignore_errors: yes

    - name: validate helm installed
      shell: helm ls
      register: helmls
      failed_when: helmls.rc == 1
      ignore_errors: yes

    - name: Check whether cluster role is created for Helm
      shell: kubectl get clusterrole cluster-admin -n kube-system | grep cluster-admin
      register: clusterrole
      failed_when: clusterrole.rc == 1
      ignore_errors: yes

    - name: Check whether clusterrolebinding is created for Helm
      shell: kubectl get clusterrolebinding -n kube-system | grep tiller
      register: clusterrolebinding
      failed_when: clusterrolebinding.rc == 1
      ignore_errors: yes

    - name: Check whether Tiller Service Account is Created for Helm
      shell:  kubectl get sa -n kube-system |grep tiller
      register: sa
      failed_when: sa.rc == 1
      ignore_errors: yes

    - name: Check whether Tiller Service Account is added to Helm
      shell: kubectl get deploy -n kube-system | grep tiller| awk '{print $1}' | xargs -L1 -I {} sudo kubectl get deploy/{} -n kube-system -o=jsonpath='{.spec.template.spec.serviceAccount}{"\n"}'
      register: sahelm
      failed_when: sahelm.rc == 1
      ignore_errors: yes

    - name: Validate the GPU Operator pods State
      shell: kubectl get pods --all-namespaces | egrep -v 'kube-system|NAME'
      register: pods
      failed_when: pods.rc == 1
      ignore_errors: yes

    - name: Validating the GPU Operator installation
      shell: kubectl run gpu-test --rm -t -i --restart=Never --image=nvidia/cuda --limits=nvidia.com/gpu=1 -- nvidia-smi
      register: cuda
      ignore_errors: yes

    - debug:
        msg: "{{ cuda.stdout_lines }}"

    - name: Status Check
      shell: echo "All tasks should be changed or ok, if it's failed or ignoring means that validation task failed."
      register: check

    - debug:
        msg: "{{ check.stdout }}"
