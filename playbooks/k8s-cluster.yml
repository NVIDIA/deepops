---
# Kubernetes Cluster Playbook

# Set facts depending on container runtime
# Use GPU operator when container runtime is not docker
# etcd_deployment_type must be `host` when container_manager is not `docker`
- hosts: all
  tasks:
    - name: Set facts when not using docker container runtime (default)
      set_fact:
        deepops_gpu_operator_enabled: true
        etcd_deployment_type: host
      when:
        - container_manager is defined
        - container_manager != "docker"
    - name: Set facts when using Docker container runtime
      set_fact:
        etcd_deployment_type: docker
        gpu_operator_default_runtime: "docker"
      when:
        - container_manager is defined
        - container_manager == "docker"

# Install python required for Ansible
- include: bootstrap/bootstrap-python.yml
  tags:
    - bootstrap

# Make sure Kubespray submodule is correct
- hosts: all
  gather_facts: false
  tasks:
    - name: make sure kubespray is at the correct version
      command: git submodule update --init
      args:
        chdir: "{{ playbook_dir | dirname }}"
      delegate_to: localhost
      run_once: true
  vars:
    ansible_become: no
    ansible_connection: local
  tags:
    - local

# Set up passwordless sudo and SSH keys if needed
- include: bootstrap/bootstrap-ssh.yml
  tags:
    - bootstrap
- include: bootstrap/bootstrap-sudo.yml
  tags:
    - bootstrap

# Disable cloud-init
- include: generic/disable-cloud-init.yml
  when: deepops_disable_cloud_init|default(true)

# Configure Chrony (NTP) sync
- include: generic/chrony-client.yml
  when: chrony_install|default(true)

# Install the OpenShift API libraries required by the GPU plugin
- include: bootstrap/bootstrap-openshift.yml
  tags:
    - bootstrap

# Configure hostnames, /etc/hosts
- include: generic/hosts.yml

# Set up a local cluster container registry
- include: container/standalone-container-registry.yml hostlist=kube-master
  when: kube_enable_container_registry|default(false)

# Install 'sshpass' program for: https://github.com/ansible/ansible/issues/56629
- hosts: all
  gather_facts: true
  tasks:
    - name: install epel
      package:
        name: epel-release
        state: present
      when: ansible_os_family == "RedHat"
    - name: install sshpass
      package:
        name: sshpass
        state: present
  environment: "{{proxy_env if proxy_env is defined else {}}}"
  tags:
    - bootstrap

# Un-hold container runtime packages on Ubuntu
# In some cases, container runtime packages can be in the 'held' state, preventing
# them from being removed and causing the install of the containerd runtime to fail
- hosts: all
  gather_facts: true
  tasks:
    - name: un-hold container runtime packages on Ubuntu
      dpkg_selections:
        name: "{{ item }}"
        selection: purge
      with_items:
        - docker-ce
        - docker-ce-cli
        - docker-ce-rootless-extras
        - containerd.io
      when:
        - container_manager is defined and container_manager != "docker"
        - ansible_distribution == "Ubuntu"
  environment: "{{proxy_env if proxy_env is defined else {}}}"

# Install Kubernetes
# for configuration, see: config/group_vars/k8s-cluster.yml
- include: ../submodules/kubespray/cluster.yml
  tags:
    - k8s
  vars:
    # override deprecated dockerproject repo; old docker repo broken as of 03.04.2020
    dockerproject_rh_repo_base_url: 'https://download.docker.com/linux/centos/7/$basearch/stable'
    dockerproject_rh_repo_gpgkey: 'https://download.docker.com/linux/centos/gpg'

# Disable swap (required for k8s), kubespray method doesn't quite cut it
- hosts: all
  become: true
  tasks:
    - name: remove swap from fstab
      lineinfile: path=/etc/fstab regexp='swap' state=absent
    - name: disable swap
      command: swapoff -a
  tags:
    - swap
 
# Manage Kubernetes cluster access config file
- hosts: k8s-cluster
  gather_facts: false
  vars:
    ansible_become: no
  tasks:
    - name: create artifacts directory
      file:
        path: "{{ artifacts_dir }}"
        state: directory
      delegate_to: localhost
      run_once: true
    - name: create kube config directory for current user
      file:
        path: "{{ lookup('env','HOME') + '/.kube/' }}"
        state: directory
      delegate_to: localhost
      run_once: true
    - name: check for kube config file
      stat:
        path: "{{ artifacts_dir }}/admin.conf"
      register: kubeconf
      delegate_to: localhost
      run_once: true
    - name: copy kube config file for current user
      copy:
        src: "{{ artifacts_dir }}/admin.conf"
        dest: "{{ lookup('env','HOME') + '/.kube/config' }}"
        backup: yes
      when: kubeconf.stat.exists
      delegate_to: localhost
      run_once: true
  tags:
    - local

# Install NVIDIA driver on GPU servers
- include: nvidia-software/nvidia-driver.yml
  vars:
    hostlist: "k8s-cluster"
  tags:
    - nvidia
  when: deepops_gpu_operator_enabled|default(true) | bool == false or
        gpu_operator_preinstalled_nvidia_software|default(true)

# Install NVIDIA container runtime on GPU servers
- include: container/nvidia-docker.yml
  vars:
    hostlist: "k8s-cluster"
  tags:
    - nvidia
  when:
    - deepops_gpu_operator_enabled|default(true) | bool == false or
      gpu_operator_preinstalled_nvidia_software|default(true)
    - container_manager is defined and container_manager == "docker"

# Manage kubectl binary
- hosts: kube-master
  gather_facts: false
  vars:
    ansible_become: no
  tasks:
    - name: copy kubectl binary to ansible host
      synchronize:
        mode: pull
        src: "/usr/local/bin/kubectl"
        dest: "{{ artifacts_dir }}/kubectl"
      run_once: true
  tags:
    - local
- hosts: k8s-cluster
  gather_facts: false
  vars:
    config_dir: "../config"
  tasks:
    - name: check for kubectl
      stat:
        path: "{{ artifacts_dir }}/kubectl"
      register: kubectl_local
      become: no
      delegate_to: localhost
      run_once: true
    - name: modify kubectl permissions
      file:
        path: "{{ artifacts_dir }}/kubectl"
        mode: '0755'
      become: no
      when: kubectl_local.stat.exists
      delegate_to: localhost
      run_once: true
    - name: copy kubectl to /usr/local/bin
      copy:
        src: "{{ artifacts_dir }}/kubectl"
        dest: "/usr/local/bin/kubectl"
      when: kubectl_local.stat.exists
      become: yes
      ignore_errors: yes
      register: kubectl_copied
      delegate_to: localhost
      run_once: true
    - name: check for copied kubectl
      stat:
        path: "/usr/local/bin/kubectl"
      register: kubectl_system
      delegate_to: localhost
      run_once: true
    - name: modify kubectl permissions
      file:
        path: "/usr/local/bin/kubectl"
        owner: root
        group: root
        mode: '0755'
      become: yes
      ignore_errors: yes
      when: kubectl_system.stat.exists
      delegate_to: localhost
      run_once: true
    - name: manually move kubectl binary
      debug:
        msg: "Unable to move kubectl, run: sudo cp {{ artifacts_dir | realpath }}/kubectl /usr/local/bin"
      when: kubectl_copied is failed
      delegate_to: localhost
      run_once: true
  tags:
    - local

# Remove taint from kube-master nodes.
# This keeps backwards compatibility and allows a few services (monitoring/etc.) to run properly.
- hosts: kube-master
  gather_facts: false
  vars:
    ansible_become: no
  tasks:
    - name: Install Helm on admin node
      command: "sh {{ playbook_dir }}/../scripts/k8s/install_helm.sh"
      delegate_to: localhost
    - name: Globally update the deprecated "stable" helm repo
      command: "/usr/local/bin/helm repo add 'stable' 'https://charts.helm.sh/stable' --force-update"
      delegate_to: localhost
    - name: kubeadm | Remove taint for master with node role
      command: "{{ artifacts_dir }}/kubectl --kubeconfig {{ artifacts_dir }}/admin.conf taint node {{ inventory_hostname }} node-role.kubernetes.io/control-plane:NoSchedule-"
      delegate_to: localhost
      failed_when: false # Taint will not be present if kube-master also under kube-node

# Install k8s GPU feature discovery
- include: k8s-cluster/nvidia-k8s-gpu-feature-discovery.yml
  tags:
    - nvidia
  when: deepops_gpu_operator_enabled|default(true) | bool == false

# Install k8s GPU device plugin
- include: k8s-cluster/nvidia-k8s-gpu-device-plugin.yml
  tags:
    - nvidia
  when: deepops_gpu_operator_enabled|default(true) | bool == false

# Install NVIDIA GPU Operator
- include: k8s-cluster/nvidia-gpu-operator.yml
  tags:
    - nvidia
  when: deepops_gpu_operator_enabled|default(true) | bool == true

# Setup a volume for NFS, install nfs_utils, and install NFS Helm chart
- include: k8s-cluster/nfs-client-provisioner.yml
  when: k8s_nfs_client_provisioner | default('false')

- include: generic/rsyslog-server.yml
  vars:
    hostlist: "{{ rsyslog_server_hostname | default('kube-master[0]') }}"
  when: kube_enable_rsyslog_server|default(true)
- include: generic/rsyslog-client.yml
  vars:
    hostlist: "{{ rsyslog_client_group | default('k8s-cluster') }}"
  when: kube_enable_rsyslog_client|default(true)
