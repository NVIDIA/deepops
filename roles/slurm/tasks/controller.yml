---

- name: install dependencies
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - mariadb-server
    - python3-mysqldb
    - s-nail
    - ssmtp
  when: ansible_os_family == "Debian"

- name: install dependencies
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - mariadb-server
    - MySQL-python
    - mailx
    - ssmtp
    - policycoreutils-python
  when: ansible_os_family == "RedHat"

- name: Allow mysql to read libaio.so.1
  sefcontext:
    target: '/lib64(/.*)?'
    setype: mysqld_db_t
    state: present
  when: ansible_os_family == "RedHat"

- name: Apply new SELinux file context to filesystem
  command: restorecon -irv /lib64
  when: ansible_os_family == "RedHat"

- name: start mariadb
  systemd:
    name: mariadb
    state: started
    enabled: yes
    daemon-reload: yes
  when: ansible_os_family == "RedHat"

- name: setup slurm db user
  mysql_user:
    name: "{{ slurm_db_username }}"
    password: "{{ slurm_db_password }}"
    host: localhost
    priv: "*.*:USAGE/slurm_acct_db.*:ALL"
    state: present

- name: create slurm directories
  file:
    path: "{{ item }}"
    state: directory
    owner: slurm
    mode: 0755
  with_items:
    - "{{ slurm_config_dir }}"
    - /var/spool/slurm/ctld
    - /var/log/slurm

- name: create slurm HA directory
  file:
    path: "{{ slurm_ha_state_save_location }}"
    state: directory
    owner: slurm
    mode: 0755
  when: "{{ slurm_enable_ha }}"

- name: configure slurm.conf
  template:
    src: "{{ slurm_conf_template }}"
    dest: "{{ slurm_config_dir }}/slurm.conf"
  notify:
  - restart slurmctld
  tags:
  - config

- name: configure slurmdbd.conf
  template:
    src: "{{ slurm_dbd_conf_template }}"
    dest: "{{ slurm_config_dir }}/slurmdbd.conf"
    mode: 0600
  notify:
  - restart slurmdbd
  tags:
  - config

- name: restart slurmdbd
  systemd:
    name: slurmdbd
    state: restarted
    enabled: yes
    daemon-reload: yes

- name: wait for slurmdbd to be available
  wait_for:
    port: 6819
    delay: 5

- name: create cluster
  command: sacctmgr -i add cluster {{ slurm_cluster_name }}
  register: create_cluster_result
  failed_when: "create_cluster_result.rc != 0 and 'already exists' not in create_cluster_result.stdout"
  changed_when: "'already exists' not in create_cluster_result.stdout"
  environment:
    PATH: '{{ slurm_install_prefix }}/bin:{{ ansible_env.PATH }}'

- name: create account
  command: sacctmgr -i add account compute-account Description="Compute Accounts" Organization="Prestige"
  register: create_account_result
  failed_when: "create_account_result.rc != 0 and 'Nothing new added' not in create_account_result.stdout"
  changed_when: "'Nothing new added' not in create_account_result.stdout"
  environment:
    PATH: '{{ slurm_install_prefix }}/bin:{{ ansible_env.PATH }}'

- name: create users
  command: sacctmgr -i create user {{ item }} account=compute-account adminlevel=None
  register: create_user_result
  failed_when: "create_user_result.rc != 0 and 'Nothing new added' not in create_user_result.stdout"
  changed_when: "'Nothing new added' not in create_user_result.stdout"
  with_items:
    - "{{ user }}"
  environment:
    PATH: '{{ slurm_install_prefix }}/bin:{{ ansible_env.PATH }}'

- name: clear slurm state when downgrading
  command: slurmctld -i
  when: slurm_downgrade
  environment:
    PATH: '{{ slurm_install_prefix }}/bin:{{ ansible_env.PATH }}'

- name: wait for slurmctld to start
  pause:
    seconds: 20
  when: slurm_downgrade

- name: kill slurmctld
  command: killall slurmctld
  ignore_errors: yes
  when: slurm_downgrade

- name: restart slurmctld
  systemd:
    name: slurmctld
    state: restarted
    enabled: yes
    daemon-reload: yes
