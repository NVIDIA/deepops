---
###########################################
# Install dependencies
###########################################

- include: setup-role.yml

- name: configure alternative library path
  template:
    src: etc/ld.so.conf.d/slurm.conf.j2
    dest: /etc/ld.so.conf.d/slurm.conf
    mode: 0644
  register: updated_slurm_ld

- name: update ld cache
  command: ldconfig
  when: updated_slurm_ld.changed

- include: munge.yml

- include: hwloc.yml
  tags: hwloc
  when: slurm_include_hwloc

- include: pmix.yml
  tags: pmix
  when: slurm_include_pmix

###########################################
# Build Slurm
###########################################
- name: default to building slurm
  set_fact:
    slurm_build: yes
    slurm_upgrade: no
    slurm_downgrade: no

- name: check installed slurm version
  shell: "{{ slurm_install_prefix }}/bin/sinfo --version | awk '{print $2}'"
  register: sinfo_version
  ignore_errors: yes

- name: don't build slurm if it's already installed, unless forced
  set_fact:
    slurm_build: no
  when: sinfo_version.stdout == slurm_version and not slurm_force_rebuild

- name: upgrade?
  set_fact:
    slurm_upgrade: yes
  when: sinfo_version.stdout and sinfo_version.stdout is version(slurm_version, '<')

- name: downgrade?
  set_fact:
    slurm_downgrade: yes
  when: sinfo_version.stdout and sinfo_version.stdout is version(slurm_version, '>')

- name: going to rebuild slurm?
  debug:
    msg: "Rebuild Slurm? {{ slurm_build }}"

- name: install build dependencies
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ slurm_build_deps }}"
  when: ansible_distribution == 'Ubuntu'

- name: install build dependencies
  yum:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ slurm_build_deps }}"
  when: ansible_os_family == 'RedHat'

- name: remove slurm packages
  apt:
    name: "{{ item }}"
    state: absent
  with_items:
    - slurm
    - slurm-wlm
    - slurmctld
    - slurmdbd
    - slurmd
  when: ansible_distribution == 'Ubuntu'
  ignore_errors: yes

- name: remove slurm packages
  yum:
    name: "{{ item }}"
    state: absent
  with_items:
    - slurm
  when: ansible_os_family == 'RedHat'
  ignore_errors: yes

- name: make build directory
  file:
    path: "{{ slurm_build_dir }}"
    state: directory
  when: slurm_build

- name: download source
  unarchive:
    src: "{{ slurm_src_url }}"
    remote_src: yes
    dest: "{{ slurm_build_dir }}"
    extra_opts:
      - --strip-components=1
  when: slurm_build

- name: uninstall old version
  command: make -j uninstall
  args:
    chdir: "{{ slurm_build_dir }}"
  ignore_errors: yes
  when: slurm_build
  tags:
    - uninstall

- name: clean src dir
  command: make distclean
  args:
    chdir: "{{ slurm_build_dir }}"
  ignore_errors: yes
  when: slurm_build

- name: configure
  command: "{{ slurm_configure }}"
  args:
    chdir: "{{ slurm_build_dir }}"
  when: slurm_build

- name: build
  shell: "make -j$(nproc) > build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}"
  when: slurm_build

- name: build contrib
  shell: "make -j$(nproc) contrib >> build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}"
  when: slurm_build

- name: install
  shell: "make -j$(nproc) install >> build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}"
  when: slurm_build
  notify:
    - restart slurmd
    - restart slurmdbd
    - restart slurmctld

- name: install contrib
  shell: "make -j$(nproc) install-contrib >> build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}"
  when: slurm_build
  notify:
    - restart slurmd
    - restart slurmdbd
    - restart slurmctld

- name: build pam_slurm_adopt
  shell: "make -j$(nproc) >> ../../build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}/contribs/pam_slurm_adopt"
  when: slurm_build

- name: install pam_slurm_adopt
  shell: "make -j$(nproc) install >> ../../build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}/contribs/pam_slurm_adopt"
  when: slurm_build
  notify:
    - restart slurmd
    - restart slurmdbd
    - restart slurmctld

- name: fix library dir permissions
  file:
    path: "{{ slurm_install_prefix }}/lib/slurm"
    state: directory
    mode: 0775

- name: fix deepops dir permissions
  file:
    path: "{{ deepops_dir }}"
    state: directory
    mode: 0755
    recurse: yes
