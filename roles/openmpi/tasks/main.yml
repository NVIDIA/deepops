---
- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
      - "{{ ansible_distribution|lower }}.yml"
      - "{{ ansible_os_family|lower }}.yml"
      paths:
      - ../vars
      skip: true
  tags:
    - always

- name: configure alternative library path
  template:
    src: ld-openmpi.conf.j2
    dest: /etc/ld.so.conf.d/openmpi.conf
    mode: 0644
  register: updated_openmpi_ld

- name: update ld cache
  command: ldconfig
  when: updated_openmpi_ld.changed

- name: default to building openmpi
  set_fact:
    openmpi_build: yes

- name: check installed openmpi version
  shell: "{{ openmpi_install_prefix }}/bin/ompi_info | grep 'Open MPI:' | awk '{print $3}'"
  register: openmpi_info_version
  ignore_errors: yes

- name: don't build openmpi if it's already installed, unless forced
  set_fact:
    openmpi_build: no
  when: openmpi_info_version.stdout == openmpi_version and not openmpi_force_rebuild

- name: install openmpi build dependencies
  apt:
    name: "{{ item }}"
  with_items: "{{ openmpi_deps }}"
  when: ansible_distribution == 'Ubuntu'

- name: install openmpi build dependencies
  yum:
    name: "{{ item }}"
    state: present
  with_items: "{{ openmpi_deps }}"
  when: ansible_os_family == 'RedHat'

- name: remove openmpi packages
  apt:
    name: "{{ item }}"
    state: absent
  with_items:
    - openmpi-bin
    - openmpi-common
    - libopenmpi-dev
  when: ansible_distribution == 'Ubuntu'
  ignore_errors: yes

- name: remove openmpi packages
  yum:
    name: "{{ item }}"
    state: absent
  with_items:
    - openmpi
    - openmpi-devel
  when: ansible_os_family == 'RedHat'
  ignore_errors: yes

- name: make openmpi build directory
  file:
    path: "{{ openmpi_build_dir }}"
    state: directory
  when: openmpi_build

- name: download openmpi source
  unarchive:
    src: "{{ openmpi_src_url }}"
    remote_src: yes
    dest: "{{ openmpi_build_dir }}"
    extra_opts:
      - --strip-components=1
  when: openmpi_build

- name: uninstall old openmpi version
  command: make -j uninstall
  args:
    chdir: "{{ openmpi_build_dir }}"
  ignore_errors: yes
  when: openmpi_build
  tags:
    - uninstall

- name: clean openmpi src dir
  command: make distclean
  args:
    chdir: "{{ openmpi_build_dir }}"
  ignore_errors: yes
  when: openmpi_build

- name: configure openmpi
  command: "{{ openmpi_configure }}"
  args:
    chdir: "{{ openmpi_build_dir }}"
  when: openmpi_build

- name: build openmpi
  shell: "make -j$(nproc) > build.log 2>&1"
  args:
    chdir: "{{ openmpi_build_dir }}"
  when: openmpi_build

- name: install openmpi
  shell: "make -j$(nproc) install >> build.log 2>&1"
  args:
    chdir: "{{ openmpi_build_dir }}"
  when: openmpi_build

- name: run ldconfig to ensure libs are found
  command: "ldconfig"
  when: openmpi_build
