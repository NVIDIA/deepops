---
- name: assert that variables are defined
  fail:
    msg: "Variable '{{ item }}' is not defined"
  when: item not in vars
  with_items:
    - nis_domain
    - nis_server

- name: prevent daemons from starting when installing packages, particularly ypbind
  copy:
    src: policy-rc.d
    dest: /usr/sbin/policy-rc.d
    owner: root
    group: root
    mode: 0700

- name: install Ubuntu packages
  apt: name=nis,rpcbind state=latest
  when: ansible_os_family == "Debian"

- name: install CentOS NIS packages
  yum: name=ypbind state=latest
  when: ansible_os_family == "RedHat"

- name: ensure rpcbind is running
  service: name=rpcbind state=started enabled=yes

- name: set server
  lineinfile:
    dest: /etc/yp.conf
    regexp: '^domain'
    line: 'domain {{ nis_domain }} server {{ nis_server }}'
  notify: "restart nis"

- name: create default domain name file
  file:
    path: /etc/defaultdomain
    owner: root
    group: root
    mode: "0644"
    state: touch

- name: configure yp domainname
  lineinfile:
    dest: /etc/defaultdomain
    regexp: '^'
    line: '{{ nis_domain }}'
  notify: "restart nis"

- name: configure nsswitch.conf
  lineinfile:
    dest: /etc/nsswitch.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^passwd', line: 'passwd: files nis' }
    - { regexp: '^group', line: 'group: files nis' }
    - { regexp: '^shadow', line: 'shadow: files nis' }
    - { regexp: '^automount', line: 'automount: files nis' }
  notify: "restart nis"

- name: make sure rpcbind is running
  service: name=rpcbind state=started enabled=yes

- name: make sure ypbind is running
  service: name=nis state=started enabled=yes

- name: remove file to prevent starting services at install time
  file:
    path: /usr/sbin/policy-rc.d
    state: absent

#
# ncsd
#

- name: nscd service use_nscd={{ nis_client_use_nscd }}
  service: name=nscd state=stopped
  failed_when: False
  when: not nis_client_use_nscd
  tags: nscd

- name: nscd packages use_nscd={{ nis_client_use_nscd }}
  apt:
    name: nscd
    state: "{{ nis_client_use_nscd | ternary('present', 'absent') }}"
    purge: "{{ not nis_client_use_nscd }}"
  tags: nscd

- name: nscd service use_nscd={{ nis_client_use_nscd }}
  service: name=nscd state=started enabled=yes
  when: nis_client_use_nscd
  tags: nscd
