# NHC -- Custom checks for DeepOps

function check_nv_drv_version() {
	expected_vers=$1
	if ! cat /proc/driver/nvidia/version | head -n1 | grep $expected_vers 2>&1 >/dev/null ; then
		echo "GPU driver version incorrect"
		return 1
	fi
	return 0
}

function check_nv_gpu_count() {
	expected_count=$1
	actual_count="$(nvidia-smi -L | wc -l)"
	if [ $expected_count -ne $actual_count ]; then
		echo "GPU count incorrect"
		return 1
	fi
	return 0
}

function check_nv_retired_pages() {
	if nvidia-smi --query-gpu=retired_pages.pending --format=csv | grep -i yes 2>&1 >/dev/null ; then
		echo "GPU retired pages pending, need to reboot"
		return 1
	fi
	return 0
}

function check_nv_pcie_link_width() {
	expected=$1
	for actual in $(nvidia-smi --query-gpu=pcie.link.width.current --format=csv | grep -v pcie.link.width.current); do
		if [ $actual -ne $expected ]; then
			echo "GPU link width incorrect - $actual"
			return $actual 
		fi
	done
	return 0
}

function check_nv_dcgmi_diag() {
	if dcgmi diag -r 1 2>&1 | grep -i -E 'Error|Fail' ; then
		echo "DCGM diag failed"
		return 1
	fi
	return 0
}

function check_ipoib_up() {
	interface=$1
	if ! ibdev2netdev | grep $interface | grep -q Up ; then
		echo "IPoIB not up on $interface"
		return 1
	fi
	return 0
}

function check_ib_link_ber() {
	interface=$1
	# Check (negative) exponent of bit error rate
	ber_exp="$(mlxlink -d $interface -c | grep "Effective Physical BER" | cut -d : -f 2 | cut -d - -f 2)"
	if [ $ber_exp -lt 9 ]; then
		echo "BER rate on $interface is too high"
		return 1
	fi
	return 0
}

check_num_numa_nodes() {
	expected=$1
	actual="$(lscpu | grep "NUMA.*CPU" | wc -l)"
	if [ $expected -ne $actual ]; then
		echo "Incorrect number of NUMA nodes"
		return 1
	fi
	return 0
}

check_num_nvme_devs() {
	expected=$1
	actual="$(nvme list | grep "/dev/nvme" | wc -l)"
	if [ $expected -ne $actual ]; then
		echo "Incorrect number of NVME devices"
		return 1
	fi
	return 0
}

check_xid_errors() {
	excluded_xid='94'
	xid_list=$(journalctl -b 0  --since "1 hour ago" --no-pager 2> /dev/null | grep "NVRM: Xid" | sed 's/^.*\] \(.*\)/\1/' | awk '{print $9}' | sed 's/,//' | sort -n | uniq | grep -v -E "${excluded_xid}" | paste -s -d,)
	if [ x"$xid_list" != x"" ]; then
		echo "Found XID errors: $xid_list"
		return 1
	fi
	return 0
}
