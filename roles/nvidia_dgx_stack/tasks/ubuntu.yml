---
- name: Check for Ubuntu version
  fail:
    msg: "Role supports Ubuntu 20.04 only"
  when:
    - ansible_distribution_version != "20.04"

- name: include 20.04 specific variables for DGX OS 5
  include_vars: ubuntu-20.04.yml
  when: ansible_distribution_version == "20.04"

# Repos and installs
- name: remove ubuntu nvidia driver ppa if installed
  apt_repository:
    repo: ppa:graphics-drivers/ppa
    state: absent

- name: remove packages when using Bright Computing source image
  apt:
    name: "{{ item }}"
    state: absent
    purge: yes
  with_items:
    - cuda-dcgm
    - cuda-driver
    - libumad2sim0
    - libsim-utils
    - ibutils

- name: remove apt mirror when using Bright Computing source image
  replace:
    path: /etc/apt/sources.list
    regexp: 'nl\.'

- name: unload drivers when using Bright Computing source image
  modprobe:
    name: "{{ item }}"
    state: absent
  with_items:
    - ib_srp
    - ib_iser
    - rdma_ucm
    - rpcrdma
    - rdma_cm
    - qedr
  tags:
  - molecule-notest

- name: download and extract DGX OS repo files
  unarchive:
    src: "{{ nvidia_dgx_ubuntu_dgx_repo_download }}"
    dest: "/etc/apt"
    remote_src: true

- name: update apt cache
  apt:
    update_cache: yes

- name: install DGX-1 packages for DGX OS 5
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - "{{ G_DGX1_PKGS }}"
  when:
    - ansible_distribution_version == "20.04"
    - (ansible_product_name is search("DGX-1")) or (dgx_override_product_type == "DGX-1")
  notify:
    - restart docker

- name: install DGX-2 packages for DGX OS 5
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - "{{ G_DGX2_PKGS }}"
  when:
    - ansible_distribution_version == "20.04"
    - (ansible_product_name is search("DGX-2")) or (dgx_override_product_type == "DGX-2")
  notify:
    - restart docker

- name: install DGXA100 packages for DGX OS 5
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - "{{ G_DGX_A100_PKGS }}"
  when:
    - ansible_distribution_version == "20.04"
    - (ansible_product_name is search("DGXA100")) or (dgx_override_product_type == "DGXA100")
  notify:
    - restart docker

- name: Disable unattended upgrades
  apt:
    name: "unattended-upgrades"
    state: "absent"
    purge: true
  when: dgx_disable_unattended_upgrades

- name: Configure CPU governor to performance mode
  systemd:
    name: "ondemand"
    state: "stopped"
    enabled: false

- name: Enable serial over lan
  apt:
    name: "nvidia-ipmisol"
    state: "present"
  when: dgx_enable_sol

- name: Enable logrotate policy
  apt:
    name: "nvidia-logrotate"
    state: "present"
  when: dgx_enable_logrotate

- name: Set up drivers on NVSwitch systems
  when: ((ansible_product_name is search("DGXA100")) or (dgx_override_product_type == "DGXA100")) or
        (ansible_product_name is search("DGX-2")) or (dgx_override_product_type == "DGX-2")
  block:
    - name: Install CUDA drivers
      apt:
        name: "{{ G_NVSWITCH_DRIVER_PKGS }}"
        state: "present"
      notify:
        - reboot after driver install
    - name: Configure services
      systemd:
        name: "{{ item }}"
        state: "started"
        enabled: true
      with_items:
        - "nvidia-persistenced"
        - "nvidia-fabricmanager"
        - "nvidia-dcgm"

- name: Set up drivers on non-NVSwitch systems
  when: ((ansible_product_name is search("DGX-1")) or (dgx_override_product_type == "DGX-1"))
  block:
    - name: Install CUDA drivers
      apt:
        name: "{{ G_NOSWITCH_DRIVER_PKGS }}"
        state: "present"
      notify:
        - reboot after driver install
    - name: Configure services
      systemd:
        name: "{{ item }}"
        state: "started"
        enabled: true
      with_items:
        - "nvidia-persistenced"
        - "nvidia-dcgm"

- name: Install Mellanox OFED
  apt:
    name: "{{ item }}"
    state: "present"
  with_items:
    - "{{ G_MLNX_PKGS }}"
  when: dgx_install_ofed

- name: Install Docker and NVIDIA container toolkit
  apt:
    name: "{{ item }}"
    state: "present"
  with_items:
    - "{{ G_DOCKER_PKGS }}"
  when: dgx_install_docker

- name: Install NVSM
  apt:
    name: "{{ item }}"
    state: "present"
  with_items:
    - "{{ G_NVSM_PKGS }}"
  when: dgx_install_nvsm

- name: Install optional packages
  apt:
    name: "{{ item }}"
    state: "present"
  with_items:
    - "{{ G_OPTIONAL_PKGS }}"
    - "{{ G_OPTIONAL_DEV_PKGS }}"


- name: enable PXE/UEFI on MLNX interfaces for DGX OS 5
  command: /usr/sbin/mlnx_pxe_setup.bash
  when:
    - ansible_distribution_version == "20.04"
    - dgx_enable_mlnx_pxe

- name: configure nv peer mem service startup
  systemd:
    name: "nv_peer_mem"
    state: "started"
    enabled: true

- name: disable srp services
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
  when:
    - dgx_disable_srp
  with_items:
    - srp_daemon
    - srptools

# setup_data_drive "/dev/sdb1" "dgx1cache"
- name: create raid directory for raid cache mount point
  file:
    path: "{{ cachefilesd_cache_dir }}"
    state: directory
    mode: "{{ cachefilesd_cache_dir_mode }}"
  when: dgx_configure_cachefilesd

- name: ensure cachefilesd is installed
  apt:
    name: "cachefilesd"
    state: "present"
  when: dgx_configure_cachefilesd

- name: ensure cachefilesd is enabled
  systemd:
    name: "cachefilesd"
    state: "started"
    enabled: true
  when: dgx_configure_cachefilesd

- name: configure cachefilesd
  template:
    src: cachefilesd.conf.j2
    dest: /etc/cachefilesd.conf
  when: dgx_configure_cachefilesd
  notify:
    - restart cachefilesd

# Misc stuff
- name: restart docker service just in case...
  systemd:
    name: docker
    state: restarted
    enabled: yes
