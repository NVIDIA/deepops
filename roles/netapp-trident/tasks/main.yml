---
# tasks file for netapp-trident role

- name: Download and extract Trident installer
  unarchive:
    src: '{{ trident_installer_url }}'
    dest: '{{ deepops_dir }}'
    remote_src: yes

- name: Copy namespace config file to control node
  template:
    src: namespace.j2
    dest: '{{ deepops_dir }}/trident-installer/namespace.yaml'
  run_once: true

- name: Create Trident namespace
  kube:
    state: present
    resource: Namespace
    name: trident
    filename: '{{ deepops_dir }}/trident-installer/namespace.yaml'
  run_once: true

- name: Install Trident using Helm
  command: '/usr/local/bin/helm -n {{ trident_namespace }} install trident {{ deepops_dir }}/trident-installer/helm/trident-operator-{{ trident_version }}.tgz'
  run_once: true

- name: Copy backend config file(s) to control node
  template:
    src: backend.j2
    dest: '{{ deepops_dir }}/trident-installer/backend-{{ item.backendName }}.json'
  with_items: '{{ backends_to_create }}'
  when: create_backends == true
  run_once: true

- name: Create Trident backend(s)
  command: '{{ deepops_dir }}/trident-installer/tridentctl -n {{ trident_namespace }} create backend -f {{ deepops_dir }}/trident-installer/backend-{{ item.backendName }}.json'
  with_items: '{{ backends_to_create }}'
  retries: 10
  delay: 30
  register: result
  until: result.rc == 0
  when: create_backends == true
  run_once: true

- name: Copy StorageClass config file(s) to control node
  copy:
    content: '{{ item }}'
    dest: '{{ deepops_dir }}/trident-installer/sc-{{ item.metadata.name }}.yaml'
  with_items: '{{ storageClasses_to_create }}'
  when: create_StorageClasses == true
  run_once: true

- name: Create StorageClasses
  kube:
    state: present
    resource: StorageClass
    name: '{{ item.metadata.name }}'
    filename: '{{ deepops_dir }}/trident-installer/sc-{{ item.metadata.name }}.yaml'
  with_items: '{{ storageClasses_to_create }}'
  when: create_StorageClasses == true
  run_once: true

- name: Create volume snapshot CRDs
  kube:
    state: present
    filename: '{{ item }}'
  with_items: '{{ volume_snapshot_CRD_manifest_URLs }}'
  when: enable_volume_snapshots == true
  run_once: true

- name: Create snapshot controller
  kube:
    state: present
    filename: '{{ item }}'
  with_items: '{{ snapshot_controller_manifest_URLs }}'
  when: enable_volume_snapshots == true
  run_once: true

- name: Copy volume snapshot class config file(s) to control node
  copy:
    content: '{{ item }}'
    dest: '{{ deepops_dir }}/trident-installer/snapclass-{{ item.metadata.name }}.yaml'
  with_items: '{{ volume_snapshot_classes_to_create }}'
  when: enable_volume_snapshots == true
  run_once: true

- name: Create volume snapshot classes
  kube:
    state: present
    resource: VolumeSnapshotClass
    name: '{{ item.metadata.name }}'
    filename: '{{ deepops_dir }}/trident-installer/snapclass-{{ item.metadata.name }}.yaml'
  with_items: '{{ volume_snapshot_classes_to_create }}'
  when: enable_volume_snapshots == true
  run_once: true

- name: Fetch tridentctl from control node
  fetch:
    src: '{{ deepops_dir }}/trident-installer/tridentctl'
    dest: '{{ tridentctl_copy_to_directory }}'
    flat: yes
  when: copy_tridentctl_to_localhost == true
  run_once: true

- name: Make tridentctl on localhost executable
  delegate_to: localhost
  become: false
  file:
    path: "{{ tridentctl_copy_to_directory }}/tridentctl"
    mode: '0755'
  when: copy_tridentctl_to_localhost == true
