# Configuration file for the Jupyter UI.
#
# Each Jupyter UI option is configured by two keys: 'value' and 'readOnly'
# - The 'value' key contains the default value
# - The 'readOnly' key determines if the option will be available to users
#
# If the 'readOnly' key is present and set to 'true', the respective option
# will be disabled for users and only set by the admin. Also when a
# Notebook is POSTED to the API if a necessary field is not present then
# the value from the config will be used.
#
# If the 'readOnly' key is missing (defaults to 'false'), the respective option
# will be available for users to edit.
#
# Note that some values can be templated. Such values are the names of the
# Volumes as well as their StorageClass
spawnerFormDefaults:
  image:
    # The container Image for the user's Jupyter Notebook
    # If readonly, this value must be a member of the list below
    value: nvcr.io/nvidia/nemo_bert_text_classification:20.07
    # The list of available standard container Images
    options:
      - nvcr.io/nvidia/ds_deployment_demo:20.06
      - nvcr.io/nvidia/dali-pytorch:latest
      - nvcr.io/nvidia/nemo_asr_app_img:20.07
      - nvcr.io/nvidia/nemo_bert_text_classification:20.07
      # TODO: Fix when the NB_PREFIX is set correctly - nvcr.io/nvidia/rapids_ml_workshop:20.11
    # By default, custom container Images are allowed
    # Uncomment the following line to only enable standard container Images
    readOnly: false
  cpu:
    # CPU for user's Notebook
    value: '0.5'
    readOnly: false
  memory:
    # Memory for user's Notebook
    value: 1.0Gi
    readOnly: false
  workspaceVolume:
    # Workspace Volume to be attached to user's Notebook
    # Each Workspace Volume is declared with the following attributes:
    # Type, Name, Size, MountPath and Access Mode
    value:
      type:
        # The Type of the Workspace Volume
        # Supported values: 'New', 'Existing'
        value: New
      name:
        # The Name of the Workspace Volume
        # Note that this is a templated value. Special values:
        # {notebook-name}: Replaced with the name of the Notebook. The frontend
        #                  will replace this value as the user types the name
        value: 'workspace-{notebook-name}'
      size:
        # The Size of the Workspace Volume (in Gi)
        value: '10Gi'
      mountPath:
        # The Path that the Workspace Volume will be mounted
        value: /home/jovyan
      accessModes:
        # The Access Mode of the Workspace Volume
        # Supported values: 'ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'
        value: ReadWriteOnce
      class:
        # The StrageClass the PVC will use if type is New. Special values are:
        # {none}: default StorageClass
        # {empty}: empty string ""
        value: '{none}'
    readOnly: false
  dataVolumes:
    # List of additional Data Volumes to be attached to the user's Notebook
    value: []
    # Each Data Volume is declared with the following attributes:
    # Type, Name, Size, MountPath and Access Mode
    #
    # For example, a list with 2 Data Volumes:
    # value:
    #   - value:
    #       type:
    #         value: New
    #       name:
    #         value: '{notebook-name}-vol-1'
    #       size:
    #         value: '10Gi'
    #       class:
    #         value: standard
    #       mountPath:
    #         value: /home/jovyan/vol-1
    #       accessModes:
    #         value: ReadWriteOnce
    #       class:
    #         value: {none}
    #   - value:
    #       type:
    #         value: New
    #       name:
    #         value: '{notebook-name}-vol-2'
    #       size:
    #         value: '10Gi'
    #       mountPath:
    #         value: /home/jovyan/vol-2
    #       accessModes:
    #         value: ReadWriteMany
    #       class:
    #         value: {none}
    readOnly: false
  gpus:
    # Number of GPUs to be assigned to the Notebook Container
    value:
      # values: "none", "1", "2", "4", "8"
      num: "1"
      # Determines what the UI will show and send to the backend
      vendors:
        - limitsKey: "nvidia.com/gpu"
          uiName: "NVIDIA"
        - limitsKey: "amd.com/gpu"
          uiName: "AMD"
      # Values: "" or a `limits-key` from the vendors list
      vendor: "nvidia.com/gpu"
    readOnly: false
  shm:
    value: true
    readOnly: false
  configurations:
    # List of labels to be selected, these are the labels from PodDefaults
    # value:
    #   - add-gcp-secret
    #   - default-editor
    value: []
    readOnly: false
  affinityConfig:
    # The default `configKey` from the options list
    # If readonly, the default value will be the only option
    value: "none"
    # The list of available affinity configs
    options:
      - configKey: "none"
        displayName: "None"
        affinity: {}
    # # (DESC) Pod gets an exclusive "n1-standard-2" Node
    # # (TIP) set PreferNoSchedule taint on this node-pool
    # # (TIP) enable cluster-autoscaler on this node-pool
    # # (TIP) dont let users request more CPU/MEMORY than the size of this node
    # - configKey: "exclusive__n1-standard-2"
    #   displayName: "Exclusive: n1-standard-2"
    #   affinity:
    #     # (Require) Node having label: `node_pool=notebook-n1-standard-2`
    #     nodeAffinity:
    #       requiredDuringSchedulingIgnoredDuringExecution:
    #         nodeSelectorTerms:
    #           - matchExpressions:
    #               - key: "node_pool"
    #                 operator: "In"
    #                 values:
    #                   - "notebook-n1-standard-2"
    #     # (Require) Node WITHOUT existing Pod having label: `notebook-name`
    #     podAntiAffinity:
    #       requiredDuringSchedulingIgnoredDuringExecution:
    #         - labelSelector:
    #             matchExpressions:
    #               - key: "notebook-name"
    #                 operator: "Exists"
    #           namespaces: []
    #           topologyKey: "kubernetes.io/hostname"
    readOnly: false
  tolerationGroup:
    # The default `groupKey` from the options list
    # If readonly, the default value will be the only option
    value: "none"
    # The list of available tolerationGroup configs
    options:
      - groupKey: "none"
        displayName: "None"
        tolerations: []
    # - groupKey: "group_1"
    #   displayName: "Group 1: description"
    #   tolerations:
    #     - key: "key1"
    #       operator: "Equal"
    #       value: "value1"
    #       effect: "NoSchedule"
    #     - key: "key2"
    #       operator: "Equal"
    #       value: "value2"
    #       effect: "NoSchedule"
    readOnly: false
